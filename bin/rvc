#!/usr/bin/env ruby
require 'readline'
require 'pp'
require 'trollop'
require 'rbvmomi'
require 'rbvmomi/trollop'
require 'shellwords'
require 'yaml'
require 'backports'
require 'rvc'

VIM = RbVmomi::VIM
include RVC::Util

Thread.abort_on_exception = true

CMD = Module.new

$opts = Trollop.options do
  banner <<-EOS
Ruby vSphere Console.

Usage:
       rvc [options] [username[:password]@]hostname

where [options] are:
EOS

  opt :insecure, "don't verify ssl certificate", :short => 'k', :default => (ENV['RBVMOMI_INSECURE'] == '1')
  opt :path, "Initial directory", :short => :none, :default => ENV['RVC_PATH'], :type => :string
  opt :cmd, "command to evaluate", :short => 'c', :multi => true, :type => :string
end

Trollop.die "At least 1 argument expected." unless ARGV.length >= 1

RVC.reload_modules false
RVC.reload_rc

$connections = {}

ARGV.each do |uri|
  begin
    puts "Connecting to #{uri}..." if ARGV.size > 1
    CMD.vim.connect uri, :insecure => $opts[:insecure]
  rescue UserError
    puts "Failed to connect to #{uri}: #{$!.message}"
    exit 1
  end
end

$context = RVC::Context.new RVC::RootNode.new
$context.cd($opts[:path]) if $opts[:path]

Readline.completion_proc = RVC::Completion::Completor
history_fn = "#{ENV['HOME']}/.rvc-history"
IO.foreach(history_fn) { |l| Readline::HISTORY << l.chomp } rescue puts "Welcome to RVC. Try the 'help' command."
history = File.open(history_fn, 'a')

$shell = RVC::Shell.new

CMD.basic.ls '.'

while true
  begin
    input = $opts[:cmd].shift || Readline.readline($shell.prompt, false) or break
    input = input.strip
    next if input.empty?
    (history.puts input; Readline::HISTORY << input) unless input == Readline::HISTORY.to_a[-1]
    $shell.eval_input input
  rescue Interrupt
    puts
  end
end
