#!/usr/bin/env ruby
require 'curses'
require 'readline'
require 'pp'
require 'trollop'
require 'rbvmomi'
require 'rbvmomi/trollop'
require 'shellwords'
require 'yaml'
require 'backports'
require 'rvc'

VIM = RbVmomi::VIM
include RVC::Util

Thread.abort_on_exception = true

MODULES = {}
CMD = Module.new

$opts = Trollop.options do
  banner <<-EOS
Ruby vSphere Console.

Usage:
       rvc [options] [hostname]

where [options] are:
EOS

  opt :host, "host", :type => :string, :short => 'o', :default => ENV['RBVMOMI_HOST']
  opt :port, "port", :type => :int, :short => :none, :default => (ENV.member?('RBVMOMI_PORT') ? ENV['RBVMOMI_PORT'].to_i : 443)
  opt :"no-ssl", "don't use ssl", :short => :none, :default => (ENV['RBVMOMI_SSL'] == '0')
  opt :insecure, "don't verify ssl certificate", :short => 'k', :default => (ENV['RBVMOMI_INSECURE'] == '1')
  opt :user, "username", :short => 'u', :type => :string, :default => ENV['RBVMOMI_USER']
  opt :password, "password", :short => 'p', :type => :string, :default => ENV['RBVMOMI_PASSWORD']
  opt :path, "SOAP endpoint path", :short => :none, :default => (ENV['RBVMOMI_PATH'] || '/sdk')

  opt :cmd, "command to evaluate", :short => 'c', :multi => true, :type => :string
end

if ARGV.length == 0
  Trollop.die("must specify host") unless $opts[:host]
elsif ARGV.length == 1
  $opts[:host] = ARGV[0]
else
  Trollop.die("too many arguments")
end

ENV['RBVMOMI_HOST'] = $opts[:host]
ENV['RBVMOMI_PORT'] = $opts[:port].to_s
ENV['RBVMOMI_SSL'] = $opts[:"no-ssl"] ? '0' : '1';
ENV['RBVMOMI_PATH'] = $opts[:path]
ENV['RBVMOMI_USER'] = $opts[:user]
ENV['RBVMOMI_PASSWORD'] = $opts[:password]

ALIASES = {
  'type' => 'basic.type',
  'debug' => 'basic.debug',
  'rc' => 'basic.rc',
  'reload' => 'basic.reload',
  'cd' => 'basic.cd',
  'ls' => 'basic.ls',
  'info' => 'basic.info',
  'i' => 'basic.info',
  'destroy' => 'basic.destroy',
  'mark' => 'basic.mark',
  'm' => 'basic.mark',
  'help' => 'basic.help',
  'exit' => 'basic.quit',
  'quit' => 'basic.quit',
  'q' => 'basic.quit',

  'on' => 'vm.on',
  'off' => 'vm.off',
  'reset' => 'vm.reset',
  'r' => 'vm.reset',
  'suspend' => 'vm.suspend',
  's' => 'vm.suspend',
  'kill' => 'vm.kill',
  'k' => 'vm.kill',
  'ping' => 'vm.ping',
  'view' => 'vmrc.view',
  'v' => 'vmrc.view',
  'V' => 'vnc.view',
  'ssh' => 'vm.ssh'
}


## internal

def tokenize str
  Shellwords.shellwords(str)
end

def evalcmd str
  cmd, *args = tokenize str
  return unless cmd
  err "invalid command" unless cmd.is_a? String
  case cmd
  when RVC::Context::MARK_REGEX
    CMD.basic.cd cmd
  else
    if cmd.include? '.'
      module_name, cmd, = cmd.split '.'
    elsif ALIASES.member? cmd
      module_name, cmd, = ALIASES[cmd].split '.'
    else
      err "unknown alias #{cmd}"
    end

    m = MODULES[module_name] or err("unknown module #{module_name}")

    opts_block = m.opts_for(cmd.to_sym)
    parser = RVC::OptionParser.new cmd, &opts_block

    begin
      args, opts = parser.parse args
    rescue Trollop::HelpNeeded
      parser.educate
      return
    end

    if parser.has_options?
      m.send cmd.to_sym, *args, opts
    else
      m.send cmd.to_sym, *args
    end
  end
end

def self.method_missing sym, *a
  str = sym.to_s
  if a.empty?
    if MODULES.member? str
      MODULES[str]
    elsif $context.marks.member?(str)
      $context.marks[str].obj
    elsif str[0..0] == '_' && $context.marks.member?(str[1..-1])
      $context.marks[str[1..-1]].obj
    else
      super
    end
  else
    super
  end
end

def prompt_username
  Readline.readline "username: "
end

def prompt_password
  system "stty -echo"
  $stdout.write "password: "
  $stdout.flush
  begin
    ($stdin.gets||exit(1)).chomp
  ensure
    system "stty echo"
    puts
  end
end

def prompt_insecure
  answer = Readline.readline "SSL certificate verification failed. Connect anyway? (y/n) "
  answer == 'yes' or answer == 'y'
end

## main

username_given = $opts[:user] != nil
password_given = $opts[:password] != nil

loop do
  begin
    $opts[:user] = prompt_username unless username_given
    $opts[:password] = prompt_password unless password_given
    loop do
      begin
        $vim = RbVmomi.connect $opts
        break
      rescue OpenSSL::SSL::SSLError
        raise if password_given
        exit 1 unless prompt_insecure
        $opts[:insecure] = true
      end
    end
    break
  rescue RbVmomi::VIM::InvalidLogin
    $stderr.puts $!.message
    exit 1 if $opts[:password_given]
  rescue Errno::EHOSTUNREACH
    abort $!.message
  end
end

$context = RVC::Context.new $vim.rootFolder
#$context.cd("/vm/#{$opts[:folder]}") XXX

Readline.completion_proc = RVC::Completion::Completor
history_fn = "#{ENV['HOME']}/.rvc-history"
IO.foreach(history_fn) { |l| Readline::HISTORY << l.chomp } rescue puts "Welcome to RVC. Try the 'help' command."
history = File.open(history_fn, 'a')

RVC.reload_modules false
RVC.reload_rc

Thread.new do
  while true
    sleep 600
    $vim.serviceInstance.RetrieveServiceContent
  end
end

vim = $vim
$binding = binding
persist_ruby = false

CMD.basic.ls '.'
loop do
begin
  input = $opts[:cmd].shift || Readline.readline("#{$opts[:host]}#{persist_ruby ? '~' : ":#{$context.display_path}>"} ", false) or break
  input = input.strip
  next if input.empty?
  if input == '//'
    persist_ruby = !persist_ruby
    next
  end

  (history.puts input; Readline::HISTORY << input) unless input == Readline::HISTORY.to_a[-1]

  if input[0..0] == '!'
    system_fg input[1..-1]
    next
  end

  ruby = persist_ruby
  if input =~ /^\//
    input = $'
    ruby = !ruby
  end

  if ruby
    result = eval(input, $binding)
    if input =~ /\#$/
      CMD.basic.type result.class.wsdl_name
    else
      pp result
    end
  else
    evalcmd input
  end
rescue SystemExit, IOError
  raise
rescue UserError, RuntimeError, RbVmomi::Fault
  if ruby
    puts "#{$!.class}: #{$!.message}"
    puts $!.backtrace * "\n"
  else
    case $!
    when RbVmomi::Fault, UserError
      puts $!.message
    else
      puts "#{$!.class}: #{$!.message}"
    end
  end
rescue Interrupt
  puts
rescue Exception
  puts "#{$!.class}: #{$!.message}"
  puts $!.backtrace * "\n"
end
end
